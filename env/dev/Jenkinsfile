pipeline {
    agent any

    environment {
        CHAT_TOKEN = credentials('google-chat-guisousa')
        GIT_URL = "https://github.com/gui-sousa/grafana-k8s.git"
        GIT_BRANCH = "dev"
        K8s_TOKEN = "k0s-vanuatu"
        APP_URL = "http://10.1.81.21:32004/"
        NAMESPACE = "staging"
    }

    stages {
        stage('Update Code') {
            steps {
                git branch: "$GIT_BRANCH", url: "$GIT_URL"
            }

            post {
                always {
                   hangoutsNotify message: "⚙️ Iniciando build\n⏰ Horario de início: $BUILD_TIMESTAMP", 
                   token: "$CHAT_TOKEN", 
                   threadByJob: false
                }
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    dockerapp = docker.build("guisousa/grafana-bwg:${env.BUILD_ID}", "-f Dockerfile . --no-cache")
                }
            }
        }

        stage('Docker Push Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'docker-gsousa') {
                        dockerapp.push('latest')
                        dockerapp.push(env.BUILD_ID)
                    }
                }
            }
        }

        stage('Deploy Kubernetes') {
            steps {
                withKubeConfig([credentialsId: "$K8s_TOKEN"]) {
                    sh 'curl -LO "https://storage.googleapis.com/kubernetes-release/release/v1.20.5/bin/linux/amd64/kubectl"'
                    sh 'chmod +x kubectl'
                    sh 'sed -i "s|\\$NAMESPACE|$NAMESPACE|g" service.yaml'
                    sh 'sed -i "s|\\$NAMESPACE|$NAMESPACE|g" deployment.yaml' 
                    sh './kubectl apply -f service.yaml'
                    sh './kubectl apply -f deployment.yaml'
                }
            }
        }

        stage('Test Grafana login Page') {
            steps {
                httpRequest consoleLogResponseBody: true, 
                responseHandle: 'NONE', 
                url: "$APP_URL", 
                validResponseCodes: '200', 
                validResponseContent: 'Grafana', 
                timeout: 60
            }
        }

        stage('Aprove commit') {
            steps {
              script {
                def userInput = input(
                    id: 'commitApproval'
                    message: "Aprovar deploy em produção?"
                    parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Aprovar o commit?', name: 'approve']
                    ]
                )
                if (!userInput.approve) {
                    post {
                        always {
                            hangoutsNotify message: "✅ Deu Certo!\n⏰ Tempo de Duração: ${currentBuild.duration / 1000} segundos", 
                            token: "$CHAT_TOKEN", 
                            threadByJob: false
                        }
                    }
                }
              }
            }
        }

        stage('Commit na Branch Master') {
            steps {
              withCredentials([usernamePassword(credentialsId: 'github-gsousa', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        sh('git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/gui-sousa/grafana-k8s')
                    }
            }
            }


    
    }

    post {
        success {
            hangoutsNotify message: "✅ Deu Certo!\n⏰ Tempo de Duração: ${currentBuild.duration / 1000} segundos", 
            token: "$CHAT_TOKEN", 
            threadByJob: false
        }

        failure {
           hangoutsNotify message: "❌ Deu Errado!\n⏰ Tempo de Duração: ${currentBuild.duration / 1000} segundos", 
           token: "$CHAT_TOKEN", 
           threadByJob: false 
        }
    }
}
